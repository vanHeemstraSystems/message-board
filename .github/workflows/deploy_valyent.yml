name: Deploy to Valyent Cloud

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  VALYENT_API_KEY: ${{ secrets.VALYENT_API_KEY }}
  FLEET_NAME: message-board-fleet
  VALYENT_PROJECT: message-board
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  CB_ADMIN_PASSWORD: ${{ secrets.CB_ADMIN_PASSWORD }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Process Environment File
        run: |
          # Replace secret placeholders in .env.valyent
          sed -i "s/\${{ secrets.DB_PASSWORD }}/${{ secrets.DB_PASSWORD }}/g" .env.valyent
          sed -i "s/\${{ secrets.CB_ADMIN_PASSWORD }}/${{ secrets.CB_ADMIN_PASSWORD }}/g" .env.valyent

      - name: Install Mock Valyent CLI
        run: |
          echo "Creating mock Valyent CLI..."
          sudo mkdir -p /usr/local/bin
          echo '#!/bin/bash
          echo "[MOCK] Valyent CLI - Executing: $@"
          
          # Add deployment status tracking
          STATUS_FILE="/tmp/deployment-status"
          
          case "$1" in
            "config")
              if [ "$2" = "set" ]; then
                echo "[MOCK] Setting $3 configuration..."
                echo "✓ Configuration updated successfully"
              else
                echo "[MOCK] Unknown config command"
                exit 1
              fi
              ;;
              
            "fleet")
              case "$2" in
                "deploy")
                  echo "[MOCK] Starting deployment of $3..."
                  echo "deploying" > "$STATUS_FILE"
                  echo "⚙ Validating configuration..."
                  sleep 1
                  echo "✓ Configuration valid"
                  echo "⚙ Creating deployment..."
                  sleep 1
                  echo "✓ Deployment created"
                  echo "⚙ Starting containers..."
                  sleep 1
                  echo "running" > "$STATUS_FILE"
                  echo "✓ Deployment successful"
                  ;;
                  
                "status")
                  if [ -f "$STATUS_FILE" ]; then
                    STATUS=$(cat "$STATUS_FILE")
                    case "$STATUS" in
                      "deploying")
                        echo "Status: DEPLOYING"
                        echo "Fleet: $3"
                        echo "Progress: Containers starting..."
                        ;;
                      "running")
                        echo "Status: RUNNING"
                        echo "Fleet: $3"
                        echo "Containers: 3/3 running"
                        echo "Health: Healthy"
                        echo "Uptime: 2m"
                        ;;
                      *)
                        echo "Status: UNKNOWN"
                        ;;
                    esac
                  else
                    echo "Status: NOT_FOUND"
                    echo "Fleet: $3"
                  fi
                  ;;
                  
                *)
                  echo "[MOCK] Unknown fleet command: $2"
                  exit 1
                  ;;
              esac
              ;;
              
            "--version")
              echo "Valyent CLI v0.1.0 (mock)"
              ;;
              
            *)
              echo "[MOCK] Unknown command: $1"
              exit 1
              ;;
          esac' | sudo tee /usr/local/bin/valyent
          sudo chmod +x /usr/local/bin/valyent
          which valyent
          valyent --version

      - name: Configure Mock CLI
        run: |
          echo "Testing mock CLI configuration..."
          valyent config set api-key "${{ secrets.VALYENT_API_KEY }}"
          valyent config set project "${{ env.VALYENT_PROJECT }}"

      - name: Test Mock Deployment
        run: |
          echo "Testing mock deployment..."
          if ! valyent fleet deploy "${{ env.FLEET_NAME }}" \
            --compose docker-compose.dev.yml \
            --env-file .env.valyent; then
            echo "Deployment failed!"
            exit 1
          fi

      - name: Verify Deployment
        run: |
          echo "Verifying deployment..."
          MAX_RETRIES=5
          RETRY_COUNT=0
          until valyent fleet status "${{ env.FLEET_NAME }}" | grep "RUNNING"; do
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Deployment verification failed after $MAX_RETRIES attempts"
              exit 1
            fi
            RETRY_COUNT=$((RETRY_COUNT+1))
            echo "Waiting for deployment... Attempt $RETRY_COUNT of $MAX_RETRIES"
            sleep 10
          done
          echo "✓ Deployment verified successfully!"

      - name: Deployment Summary
        if: always()
        run: |
          echo "=== Deployment Summary ==="
          echo "Project: ${{ env.VALYENT_PROJECT }}"
          echo "Fleet: ${{ env.FLEET_NAME }}"
          echo "Status:"
          valyent fleet status "${{ env.FLEET_NAME }}"
          echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "======================="
          